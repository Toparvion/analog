import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '2.2.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
        classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version:  '1.0.1'
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '4.3.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

bootJar {
    archiveFileName = 'analog.jar'
    manifest {
        attributes(
                "Implementation-Title": "AnaLog",
                "Implementation-Version": archiveVersion.get(),
                "Implementation-Vendor": "Toparvion"
        )
    }
}

repositories {
    // mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

dependencies {
    // Backend compile deps
//    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    implementation platform (group: 'org.springframework.boot', name: 'spring-boot-dependencies', version: springBootVersion)
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot' , name: 'spring-boot-starter-websocket'
    implementation group: 'net.bull.javamelody', name: 'javamelody-spring-boot-starter', version: '1.78.0'

    implementation group: 'org.springframework.integration', name: 'spring-integration-file'
    implementation group: 'org.springframework.integration', name: 'spring-integration-rmi'

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation group: 'net.sf.jtidy', name: 'jtidy', version: 'r938'
    implementation group: 'com.github.mpkorstanje', name: 'simmetrics-core', version: '4.1.1'
    implementation group: 'com.github.zafarkhaja', name: 'java-semver', version: '0.9.0'

    // Frontend deps
    implementation group: 'org.webjars', name: 'angularjs', version: '1.5.8'
    implementation group: 'org.webjars', name: 'highlightjs', version: '9.8.0'
    implementation group: 'org.webjars', name: 'jquery', version: '1.11.1'
    implementation group: 'org.webjars.npm', name: 'jquery.scrollto', version: '2.1.2'
    implementation group: 'org.webjars', name: 'sockjs-client', version: '1.1.2'
    implementation group: 'org.webjars.npm', name: 'stomp__stompjs', version: '3.1.2'
    // compile group: 'org.webjars', name: 'bootstrap', version: '3.3.7' // imported as downloaded themed version
    implementation group: 'org.webjars', name: 'angular-ui-select', version: '0.19.6'
    implementation group: 'org.webjars.npm', name: 'balloon-css', version: '0.5.0'

    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    runtimeOnly group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // Test deps
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    // JUnit family
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine'
}

junitPlatform {
    enableStandardTestTask = true
}
test {
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
}

startScripts { enabled = false }        // to avoid build fails because of Gradle application plugin 

distributions {
    boot {
        contents {
            into 'config/', { from 'config/' }
            into 'tail-win', { from 'tail/win' }
            into('') {   // add empty dirs for logs and work files as per https://stackoverflow.com/a/48901794/3507435
                File.createTempDir().with {
                    def tmpLog = new File(absolutePath, 'log')
                    tmpLog.mkdirs()
                    from(absolutePath) { includeEmptyDirs = true }
                }
                File.createTempDir().with {
                    def tmpLog = new File(absolutePath, 'work')
                    tmpLog.mkdirs()
                    from(absolutePath) { includeEmptyDirs = true }
                }
            }
        }
    }
}

//<editor-fold desc="Tasks for working with Docker images">
docker {
    url = project['docker.url']
    registryCredentials {
        url = project['docker.registry.url']
        username = project['docker.registry.username']
        password = project['docker.registry.password']
        email = project['docker.registry.email']
    }
}
task createDockerfile(type: Dockerfile) {
    description 'Generates Dockerfile for building an image of the application'
    group 'docker'

    from project['docker.base-image']
    // all the consequent command will resolve their path relative to the following:
    workingDir "/analog"
    // copy main executable file of the application:
    copyFile bootJar.archiveFileName.get(), bootJar.archiveFileName.get()
    // copy config files:
    copyFile 'config/', 'config/'
    // mount dirs to store data between restarts (if needed):
    // volume "/microservice/work", "/microservice/log"
    environmentVariable 'APP_NAME', project.name
    exposePort 8083
    // conform the launch command:
    entryPoint 'java'
    // the command at whole will look like 'java -X... -jar analog.jar'
    defaultCommand '-Xmx256M', '-XX:MaxMetaspaceSize=256M', '-XX:+HeapDumpOnOutOfMemoryError', '--enable-preview',
                   '-jar', "${bootJar.archiveFileName.get()}"
}

task syncImageFiles(type: Sync) {
    description 'Copies to build/docker all the files for build the image'
    group 'docker'

    dependsOn assemble
    from bootJar.archiveFile.get().getAsFile()
    into createDockerfile.destFile.getAsFile().get().parentFile
    into 'config/', {
        from 'config/'              // point the config dir apart from others
    }
    preserve {
        include 'Dockerfile'
    }
}
createDockerfile.dependsOn syncImageFiles

task buildImage(type: DockerBuildImage) {
    description 'Builds and uploads Docker image of the application'

    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.getAsFile().get().parentFile
    tags = ["${project.name}:${project.version}"]
}

task dockerVersion(type: DockerVersion) {
    description 'Prints Docker version info'
}
task dockerInfo(type: DockerInfo) {
    description 'Prints Docker instance info'
}
//</editor-fold>